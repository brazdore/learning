Fazer um texto explicando o que é override e overloading
Tanto o override quanto o overloading são formas de implementar o polimorfismo na OOP. O polimorfismo é uma palavra derivada do grego (Πολυμορφισμός) e significa muitas formas. Em OOP, os objetos pertencem a classes e possuem atributos e comportamentos. Um objeto A pode fazer parte de mais de uma classe; dependendo do nível de abstração utilizado.
O overloading é o sobrecarregamento de um método dentro de uma mesma classe. Acontece quando existe mais de um método em uma mesma classe com o mesmo nome, porém com parâmetros diferentes. É uma forma de processar um mesmo comportamento com entradas diferentes. Por exemplo, se na classe Dog temos o método doBark(Human h) e o método doBark(Dog d), então doBark sofre overloading na classe Dog, e seu comportamento de latir pode (e deveria) ter uma saída diferente para cada entrada. Por exemplo, o cachorro pode latir com “Au Au” quando vê um humano, e latir com “Au Au Au” quando vê um cachorro.
O override, por sua vez, é a sobrescrita de um método herdado da superclasse para a subclasse. Ocorre quando temos a mesma assinatura do método em ambas as classes, porém implementações diferentes. No caso do cachorro, por exemplo, poderíamos pensar na classe Dog como uma subclasse de Mammal. Todo cachorro é um mamífero. Digamos que todos os mamíferos produzem sons. Em Mammal, poderia existir um método makeSound(), que seria sobrescrito em Dog para printar “Au Au”; mas também poderia ser sobrescrito em Elephant para printar “Fuumm Uuuuh”. Cada mamífero produz um som específico, por isso que o método makeSound() deve ser sobrescrito em cada subclasse.